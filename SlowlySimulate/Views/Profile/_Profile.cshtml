@model SlowlySimulate.Api.ViewModels.Profile.GetProfileViewModel

@{
    ViewBag.Title = "Profile";
}

<link rel="stylesheet" href="~/css/profile.css" />

<div class="col-9 p-3">
    <div class="card shadow-sm my-2">
        <div class="card-header">
            <strong>@Model.DisplayName</strong>
        </div>
        <div class="card-body">
            <!-- Centering the image -->
            <div class="w-100 position-relative">
                <div class="avatar-wrapper-2 text-center" dir="ltr">
                    <img src="~/images/OIP.jpg" class="rounded-circle avatar-border" alt="@Model.SlowlyId" width="180" height="180">
                </div>
            </div>
            <hr>
            <span class="badge badge-light pl-2 mb-2" dir="ltr">
                <span class="text-black-50">Slowly ID</span>
                <span class="badge badge-light ml-2 bg-white text-dark text-monospace" style="font-size: 15px;">@Model.SlowlyId</span>
            </span>
            <div class="custom-control custom-checkbox ml-1 mb-3">
                <input type="checkbox" class="custom-control-input" id="add_by_id" checked="@Model.AllowAddMeById">
                <label class="custom-control-label" for="add_by_id">Allow others to add me by ID</label>
            </div>
            <hr>
            <table class="table table-borderless profile-list table-sm">
                <tbody>
                <tr>
                    <td width="30" class="text-center"><i class="bi bi-calendar text-calm"></i></td>
                    <td>@Model.BirthDate?.ToString("MMM d (yy)")</td>
                </tr>
                <tr>
                    <td class="text-center">
                        @if (Model.GenderType == GenderType.Man)
                        {
                            <i class="bi bi-gender-male text-calm"></i>
                        }
                        else if (Model.GenderType == GenderType.Woman)
                        {
                            <i class="bi bi-gender-female text-calm"></i>
                        }
                    </td>
                    <td>@Model.GenderType.ToString()</td>
                </tr>
                <tr>
                    <td class="text-center"><i class="bi bi-geo-alt text-calm"></i></td>
                    <td>@Model.Country</td>
                </tr>
                </tbody>
            </table>
            <hr>

            @* Writing Habits *@

            <div class="writing-habits">
                <div class="form-group">
                    <label for="letterLength"><i class="bi bi-file-text text-calm"></i> Letter Length</label>
                    @Html.DropDownListFor(model => model.LetterLength, GetLetterLengthOptions(), new { @class = "form-control custom-select custom-select-sm" })
                </div>

                <div class="form-group">
                    <label for="replyTime"><i class="bi bi-clock text-calm"></i> Reply Time</label>
                    @Html.DropDownListFor(model => model.ReplyTime, GetReplyTimeOptions(), new { @class = "form-control custom-select custom-select-sm" })
                </div>
            </div>


            @* About Me Section *@

            <div class="form-group mb-0">
                <label class="small text-dark mb-2">About Me</label>
                @Html.TextAreaFor(model => model.AboutMe, new { @class = "form-control", rows = 3, placeholder = "Describe Yourself", style = "min-height: 150px;" })
            </div>

            @* Save and Preview Buttons *@

            <div class="d-flex mt-2">
                <button  id="previewProfileBtn" class="btn btn-light btn-block mx-1">
                    <i class="bi bi-eye text-calm mr-2"></i>Preview My Profile
                </button>
                <button class="btn btn-primary btn-block mx-1" onclick="saveProfile()">
                    Save
                </button>
            </div>

        </div>
    </div>
</div>

<div class="modal fade" id="profileModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <div class="text-center p-0 w-100 position-relative">
                    <h6 class="text-primary pt-2" id="modalDisplayName"></h6>
                    <div class="avatar-wrapper-2 text-center">
                        <img src="~/images/OIP.jpg" class="rounded-circle avatar-border" alt="" width="180" height="180" id="modalAvatar">
                    </div>
                    <div class="position-absolute" style="top: 0px; right: -5px;">
                        <button class="btn btn-default" data-dismiss="modal">
                            <i class="bi bi-close h5"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="read-only modal-body">
                <div class="profile-wrapper" dir="ltr">
                    <div class="profile-container" dir="auto">
                        <div class="small text-light flex-grow-1">About <span id="modalDisplayNameAbout"></span></div>
                        <p class="mt-1 about" id="modalAbout"></p>
                        <button type="button" class="btn btn-sm btn-block btn-light mt-n2"><i class="bi bi-chevron-down"></i></button>
                        <table class="table table-borderless profile-list table-sm">
                            <tbody>
                                <tr>
                                    <td class="icon-td"><i class="bi bi-calendar text-calm"></i></td>
                                    <td><span class="" id="modalBirthDate"></span> </td>
                                </tr>
                                <tr>
                                    <td class="icon-td" id="modalGenderIcon"></td>
                                    <td id="modalGender"></td>
                                </tr>
                                <tr>
                                    <td class="icon-td"><i class="bi bi-pin text-calm"></i></td>
                                    <td id="modalCountry"></td>
                                </tr>
                            </tbody>
                        </table>
                        <hr class="mt-1 mb-3">
                        <div>
                            <div class="small text-light">Writing Habits</div>
                            <table class="table table-borderless profile-list table-sm mt-1">
                                <tbody>
                                    <tr>
                                        <td class="icon-td"><i class="bi bi-pencil text-calm"></i></td>
                                        <td class="position-relative text-left" id="modalLetterLength"></td>
                                    </tr>
                                    <tr>
                                        <td class="icon-td"><i class="bi bi-clock text-calm"></i></td>
                                        <td class="position-relative text-left" id="modalReplyTime"></td>
                                    </tr>
                                </tbody>
                            </table>
                            <hr class="mt-1 mb-3">
                        </div>
                        <div class="small text-light position-relative">Topics</div>
                        <div class="my-3">
                            <div class="h5 m-0" id="modalTopics"></div>
                            <div class="h5 m-0"></div>
                        </div>
                        <p class="text-dark mb-3 small"><i class="bi bi-check-square text-calm"></i> Common Topics</p>
                        <hr class="mt-2 mb-4">
                        <div class="small text-dark">Languages</div>
                        <div class=" mt-3 mb-4 row" id="modalLanguages"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        $('#previewProfileBtn').on('click', function () {
            $.ajax({
                url: '/Profile/GetUserProfilePreviewQuery',
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    console.log(data)
                    updateProfileModal(data);
                },
                error: function (error) {
                    console.error('Error fetching profile data:', error);
                }
            });
        });

        function updateProfileModal(profileData) {
            // Update modal content with the received data
            $('#modalDisplayName').text(profileData.displayName);
            $('#modalAvatar').attr('src', profileData.avatarUrl);
            $('#modalDisplayNameAbout').text(profileData.displayName);
            $('#modalAbout').text(profileData.aboutMe);

            // Update other profile details
            $('#modalBirthDate').html(profileData.dateOfBirth);
            
            var genderType = profileData.genderType;
            var genderIconClass = getGenderTypeIcon(genderType);
            var genderLabel = getGenderTypeLabel(genderType);

            $('#modalGenderIcon').html(`<i class="${genderIconClass}"></i>`);
            $('#modalGender').text(`Gender: ${genderLabel}`);

            //$('#modalGender').text(`Gender: ${getGenderTypeLabel(profileData.genderType)}`);
            $('#modalCountry').text(profileData.country);

            // Writing Habits
            $('#modalLetterLength').html(`Letter Length: <strong>${getLetterLengthLabel(profileData.letterLength)}</strong>`);
            $('#modalReplyTime').html(`Reply Time: <strong>${getReplyTimeLabel(profileData.replyTime)}</strong>`);

            // Topics
            var topicsHtml = '';
            if (profileData.topics && profileData.topics.length > 0) {
                topicsHtml = profileData.topics.map(topic => `<span class="badge badge-pill badge-tag badge-active">${topic}</span>`).join('');
            }
            $('#modalTopics').html(topicsHtml);

            // Languages
            var languagesHtml = '';
            if (profileData.languages && profileData.languages.length > 0) {
                languagesHtml = profileData.languages.map(language => {
                    // Check if the properties exist before accessing them
                    const name = language.name || 'Unknown Language';
                    const level = language.level || 0;
                    return `
                            <div class="col-6 mb-2">${name}
                                <div class="small lang-level">${getLanguageLevelHtml(level)}</div>
                            </div>`;
                }).join('');
            }
            $('#modalLanguages').html(languagesHtml);

            // Show the modal
            $('#profileModal').modal('show');
        }

        function getLetterLengthLabel(letterLength) {
            switch (letterLength) {
                case 0: return 'No Preferences';
                case 1: return 'Short';
                case 2: return 'Short-Medium';
                case 3: return 'Medium';
                case 4: return 'Medium-Long';
                case 5: return 'Long';
                default: return 'Unknown';
            }
        }

        function getReplyTimeLabel(replyTime) {
            switch (replyTime) {
                case 0: return 'As Soon As Possible';
                case 1: return 'Within A Week';
                case 2: return 'Within 2 Weeks';
                case 3: return 'Within 3 Weeks';
                case 4: return 'Within A Month';
                case 5: return 'Over A Month';
                default: return 'Unknown';
            }
        }

        function getGenderTypeLabel(genderType) {
            switch (genderType) {
                case 0: return 'Man';
                case 1: return 'Woman';
                default: return 'Unknown';
            }
        }
        
        function getGenderTypeIcon(genderType) {
            switch (genderType) {
                case 0: return 'bi bi-gender-male text-calm'; // Male
                case 1: return 'bi bi-gender-female text-calm'; // Female
                default: return 'bi bi-question text-danger'; // Unknown or other
            }
        }


        function getLanguageLevelHtml(level) {
            var totalSquares = 6;
            var levelHtml = '';

            for (var i = 1; i <= totalSquares; i++) {
                var isFilled = i <= level;
                var iconClass = isFilled ? 'bi bi-check-square text-calm' : 'bi bi-square text-calm';

                levelHtml += `<i class="${iconClass}"></i>`;
            }

            return levelHtml;
        }
        
    });
    

    function saveProfile() {
        // Gather form data
        var letterLength = $("#LetterLength").val();
        var replyTime = $("#ReplyTime").val();
        var aboutMe = $("#AboutMe").val();
        var allowAddMeById = $("#add_by_id").is(":checked");

        var requestData = {
            LetterLength: letterLength,
            ReplyTime: replyTime,
            AboutMe: aboutMe,
            AllowAddMeById: allowAddMeById
        };

        console.log(JSON.stringify(requestData))
        $.ajax({
            url: '@Url.Action("UpdateProfile", "Profile")',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(requestData),
            success: function (response) {
                if (response.statusCode === 200) {
                    showSuccessAlert(response.message, { autoClose: true, timeout: 3000 });
                }
            },
            error: function (error) {
                showErrorAlert(error, { autoClose: true, timeout: 3000 });
            }
        });
    }
</script>

@functions {
    private List<SelectListItem> GetLetterLengthOptions()
    {
        return Enum.GetValues(typeof(LetterLength))
            .Cast<LetterLength>()
            .Select(value => new SelectListItem
            {
                Text = value.ToString(),
                Value = ((int)value).ToString(),
                Selected = value == Model.LetterLength
            })
            .ToList();
    }

    private List<SelectListItem> GetReplyTimeOptions()
    {
        return Enum.GetValues(typeof(ReplyTime))
            .Cast<ReplyTime>()
            .Select(value => new SelectListItem
            {
                Text = value.ToString(),
                Value = ((int)value).ToString(),
                Selected = value == Model.ReplyTime
            })
            .ToList();
    }
}